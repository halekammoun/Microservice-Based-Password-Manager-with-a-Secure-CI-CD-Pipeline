name: Secured-CI-CD-pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  sonarq-integration:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
      with:
        # with Disabling shallow clone is recommended for improving relevancy of reporting
        fetch-depth: 0
    - name: Test SonarQube connectivity
      run: |
        curl -v ${{ secrets.SONAR_HOST_URL }}/api/system/status
    - name: SonarQube Scan
      uses: sonarsource/sonarqube-scan-action@v2
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }} 
        SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }} 
        SONAR_PROJECT_KEY: ${{ secrets.SONAR_PROJECT_KEY }} 
        SONAR_PROJECT_NAME: "Microservice-Based-Password-Manager-with-a-Secure-CI-CD-Pipeline"
      
  build-trivy-scan-and-push:
    runs-on: ubuntu-latest
    #needs: sonarq-integration  # Ensure SonarQube analysis completes before the build 

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Build Docker image
        id: build-image
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile
          push: false
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/web:latest
      - name: Scan image with Trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ secrets.DOCKERHUB_USERNAME }}/web:latest
      - name: Push Docker image
        if: success()  # Push only if Trivy scan succeeds
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/web:latest        
  build-and-zap-scan: 
    runs-on: ubuntu-latest
    needs: build-trivy-scan-and-push
    steps:
    # Step 1: Checkout code
      - name: Checkout code
        uses: actions/checkout@v2

    # Step 2: Check out Docker Compose version
      - name: Check out Docker Compose version
        run: docker compose --version

    # Step 3: Build and run Docker Compose
      - name: Build and run Docker Compose
        env:
          MYSQL_DATABASE: ${{ secrets.MYSQL_DATABASE }}
          MYSQL_USER: ${{ secrets.MYSQL_USER }}
          MYSQL_PASSWORD: ${{ secrets.MYSQL_PASSWORD }}
          MYSQL_ROOT_PASSWORD: ${{ secrets.MYSQL_ROOT_PASSWORD }}
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
        run: |
          docker compose up -d
          sleep 15  
    # Step 4: Get container IP address
      - name: Debug Docker containers
         run: docker ps

      - name: Get web container IP address
        id: get_ip
        run: |
          CONTAINER_ID=$(docker ps -qf "name=web")
          echo "Web Container ID: $CONTAINER_ID"
          CONTAINER_IP=$(docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' $CONTAINER_ID)
          echo "Web Container IP: $CONTAINER_IP"
          echo "container_ip=$CONTAINER_IP" >> $GITHUB_ENV
    # Step 5: Test application connectivity
      - name: Test connectivity to the web app
        run: |
          curl -s "http://172.18.0.3:8000" || echo "Failed to connect"
#       # Step 4: Test the app with curl
#      - name: Test app accessibility
#        run: |
#          curl --fail http://web:8000 || (echo "App is not accessible!" && exit 1)

#      # Step 5: Run OWASP ZAP Scan
#      - name: ZAP Scan
#        uses: zaproxy/action-full-scan@v0.7.0
#        with:
#          token: ${{ secrets.GITHUB_TOKEN }}
#          target: http://localhost:8000
