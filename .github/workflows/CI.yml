name: Build and Push Docker Images

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository code
      - name: Checkout code
        uses: actions/checkout@v2

      # Step 2: Set up JDK 17 using Temurin distribution
      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'temurin'  # Correct distribution name

      # Step 3: Log in to Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Step 4: Set up Docker Buildx for multi-platform support
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      # Step 5: Build and push Docker image
      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/web:latest

      # Step 6: Set up SonarQube scanner
      - name: Run SonarQube analysis
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}  # Secret token from SonarQube
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}  # SonarQube server URL from secrets
          SONAR_PROJECT_KEY: "Microservice-Based-Password-Manager-with-a-Secure-CI-CD-Pipeline"  # Your project key
          SONAR_PROJECT_NAME: "Microservice-Based-Password-Manager"  # Your project name
        run: |
          # Download the SonarQube scanner (or use a preinstalled version)
          wget -qO- https://github.com/SonarSource/sonar-scanner-cli/releases/download/4.6.2.2472/sonar-scanner-cli-4.6.2.2472-linux.zip | unzip -d /opt/sonar-scanner -
          export SONAR_SCANNER_HOME=/opt/sonar-scanner/sonar-scanner-4.6.2.2472
          export PATH=$SONAR_SCANNER_HOME/bin:$PATH
          sonar-scanner

      # Step 7: Check Docker Compose version (optional check for Compose functionality)
      - name: Check out Docker Compose version
        run: docker compose --version

      # Step 8: Build and run Docker Compose to set up the environment
      - name: Build and run Docker Compose
        env:
          MYSQL_DATABASE: ${{ secrets.MYSQL_DATABASE }}
          MYSQL_USER: ${{ secrets.MYSQL_USER }}
          MYSQL_PASSWORD: ${{ secrets.MYSQL_PASSWORD }}
          MYSQL_ROOT_PASSWORD: ${{ secrets.MYSQL_ROOT_PASSWORD }}
        run: |
          docker compose up -d
