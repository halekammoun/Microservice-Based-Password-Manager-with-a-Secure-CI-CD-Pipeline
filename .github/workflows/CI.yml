name: Build and Push Docker Images

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  sonarq-integration:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
      with:
        # with Disabling shallow clone is recommended for improving relevancy of reporting
        fetch-depth: 0
    - name: Test SonarQube connectivity
      run: |
        curl -v ${{ secrets.SONAR_HOST_URL }}/api/system/status
    - name: SonarQube Scan
      uses: sonarsource/sonarqube-scan-action@v2
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }} 
        SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }} 
        SONAR_PROJECT_KEY: ${{ secrets.SONAR_PROJECT_KEY }} 
        SONAR_PROJECT_NAME: "Microservice-Based-Password-Manager-with-a-Secure-CI-CD-Pipeline"
      
  build-trivy-scan-and-push:
    runs-on: ubuntu-latest
    needs: sonarq-integration  # Ensure SonarQube analysis completes before the build 

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Build Docker image
        id: build-image
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile
          push: false
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/web:latest
      - name: Scan image with Trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ secrets.DOCKERHUB_USERNAME }}/web:latest
      - name: Push Docker image
        if: success()  # Push only if Trivy scan succeeds
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/web:latest

      - name: Check out Docker Compose version
        run: docker compose --version

      - name: Build and run Docker Compose
        env:
          MYSQL_DATABASE: ${{ secrets.MYSQL_DATABASE }}
          MYSQL_USER: ${{ secrets.MYSQL_USER }}
          MYSQL_PASSWORD: ${{ secrets.MYSQL_PASSWORD }}
          MYSQL_ROOT_PASSWORD: ${{ secrets.MYSQL_ROOT_PASSWORD }}
        run: |
          docker compose up -d
  zap-scan: 
    runs-on: ubuntu-latest

    steps:
    # Step 1: Checkout code
      - name: Checkout code
        uses: actions/checkout@v2

    # Step 2: Check out Docker Compose version
      - name: Check out Docker Compose version
        run: docker compose --version

    # Step 3: Build and run Docker Compose
      - name: Build and run Docker Compose
        env:
          MYSQL_DATABASE: ${{ secrets.MYSQL_DATABASE }}
          MYSQL_USER: ${{ secrets.MYSQL_USER }}
          MYSQL_PASSWORD: ${{ secrets.MYSQL_PASSWORD }}
          MYSQL_ROOT_PASSWORD: ${{ secrets.MYSQL_ROOT_PASSWORD }}
        run: |
          docker compose up -d

    # Step 4: Start ZAP container
      - name: Start OWASP ZAP
        run: |
          docker run -d --name zap -u zap --network="host" owasp/zap2docker-stable zap.sh -daemon -port 8080

    # Step 5: Run ZAP Baseline Scan
      - name: Run ZAP Baseline Scan
        run: |
          docker exec zap zap-baseline.py -t http://localhost:8000 -r zap-report.html

    # Step 6: Upload ZAP Report
      - name: Upload ZAP Report
        uses: actions/upload-artifact@v3
        with:
          name: ZAP Report
          path: zap-report.html
