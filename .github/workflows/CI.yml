name: Build and Push Docker Images

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  sonarq-integration:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      # Install dependencies
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y unzip curl

      # Download SonarQube scanner
      - name: Download SonarQube scanner
        run: |
          curl -sSLo sonar-scanner.zip https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.6.2.2472-linux.zip
          unzip sonar-scanner.zip -d $HOME/sonar-scanner

      # Set SONAR_SCANNER_HOME environment variable
      - name: Set SONAR_SCANNER_HOME
        run: echo "SONAR_SCANNER_HOME=$HOME/sonar-scanner/sonar-scanner-4.6.2.2472-linux" >> $GITHUB_ENV

      # Run SonarQube analysis
      - name: Run SonarQube Scanner
        run: |
          $SONAR_SCANNER_HOME/bin/sonar-scanner \
            -Dsonar.projectKey=Microservice-Based-Password-Manager-with-a-Secure-CI-CD-Pipeline \
            -Dsonar.sources=.

  build-and-push:
    runs-on: ubuntu-latest
    needs: sonarq-integration  # Ensure SonarQube analysis completes before the build

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/web:latest

      - name: Check out Docker Compose version
        run: docker compose --version

      - name: Build and run Docker Compose
        env:
          MYSQL_DATABASE: ${{ secrets.MYSQL_DATABASE }}
          MYSQL_USER: ${{ secrets.MYSQL_USER }}
          MYSQL_PASSWORD: ${{ secrets.MYSQL_PASSWORD }}
          MYSQL_ROOT_PASSWORD: ${{ secrets.MYSQL_ROOT_PASSWORD }}
        run: |
          docker compose up -d
